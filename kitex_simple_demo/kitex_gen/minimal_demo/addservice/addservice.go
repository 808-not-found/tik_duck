// Code generated by Kitex v0.4.4. DO NOT EDIT.

package addservice

import (
	"context"
	minimal_demo "github.com/808-not-found/tik_duck/kitex_simple_demo/kitex_gen/minimal_demo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return addServiceServiceInfo
}

var addServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AddService"
	handlerType := (*minimal_demo.AddService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add": kitex.NewMethodInfo(addHandler, newAddServiceAddArgs, newAddServiceAddResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "minimal_demo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*minimal_demo.AddServiceAddArgs)
	realResult := result.(*minimal_demo.AddServiceAddResult)
	success, err := handler.(minimal_demo.AddService).Add(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAddServiceAddArgs() interface{} {
	return minimal_demo.NewAddServiceAddArgs()
}

func newAddServiceAddResult() interface{} {
	return minimal_demo.NewAddServiceAddResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, req *minimal_demo.AddRequest) (r *minimal_demo.AddResponse, err error) {
	var _args minimal_demo.AddServiceAddArgs
	_args.Req = req
	var _result minimal_demo.AddServiceAddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
