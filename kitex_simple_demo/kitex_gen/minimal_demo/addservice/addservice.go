// Code generated by Kitex v0.4.4. DO NOT EDIT.

package addservice

import (
	"context"
	"fmt"
	minimal_demo "github.com/808-not-found/tik_duck/kitex_simple_demo/kitex_gen/minimal_demo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return addServiceServiceInfo
}

var addServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "AddService"
	handlerType := (*minimal_demo.AddService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add":   kitex.NewMethodInfo(addHandler, newAddArgs, newAddResult, false),
		"Query": kitex.NewMethodInfo(queryHandler, newQueryArgs, newQueryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "minimal_demo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(minimal_demo.AddRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(minimal_demo.AddService).Add(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddArgs:
		success, err := handler.(minimal_demo.AddService).Add(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddResult)
		realResult.Success = success
	}
	return nil
}
func newAddArgs() interface{} {
	return &AddArgs{}
}

func newAddResult() interface{} {
	return &AddResult{}
}

type AddArgs struct {
	Req *minimal_demo.AddRequest
}

func (p *AddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(minimal_demo.AddRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in AddArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *AddArgs) Unmarshal(in []byte) error {
	msg := new(minimal_demo.AddRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddArgs_Req_DEFAULT *minimal_demo.AddRequest

func (p *AddArgs) GetReq() *minimal_demo.AddRequest {
	if !p.IsSetReq() {
		return AddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddArgs) IsSetReq() bool {
	return p.Req != nil
}

type AddResult struct {
	Success *minimal_demo.AddResponse
}

var AddResult_Success_DEFAULT *minimal_demo.AddResponse

func (p *AddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(minimal_demo.AddResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in AddResult")
	}
	return proto.Marshal(p.Success)
}

func (p *AddResult) Unmarshal(in []byte) error {
	msg := new(minimal_demo.AddResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddResult) GetSuccess() *minimal_demo.AddResponse {
	if !p.IsSetSuccess() {
		return AddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddResult) SetSuccess(x interface{}) {
	p.Success = x.(*minimal_demo.AddResponse)
}

func (p *AddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func queryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(minimal_demo.QueryRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(minimal_demo.AddService).Query(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *QueryArgs:
		success, err := handler.(minimal_demo.AddService).Query(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryResult)
		realResult.Success = success
	}
	return nil
}
func newQueryArgs() interface{} {
	return &QueryArgs{}
}

func newQueryResult() interface{} {
	return &QueryResult{}
}

type QueryArgs struct {
	Req *minimal_demo.QueryRequest
}

func (p *QueryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(minimal_demo.QueryRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryArgs) Unmarshal(in []byte) error {
	msg := new(minimal_demo.QueryRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryArgs_Req_DEFAULT *minimal_demo.QueryRequest

func (p *QueryArgs) GetReq() *minimal_demo.QueryRequest {
	if !p.IsSetReq() {
		return QueryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryArgs) IsSetReq() bool {
	return p.Req != nil
}

type QueryResult struct {
	Success *minimal_demo.QueryResponse
}

var QueryResult_Success_DEFAULT *minimal_demo.QueryResponse

func (p *QueryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(minimal_demo.QueryResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryResult) Unmarshal(in []byte) error {
	msg := new(minimal_demo.QueryResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryResult) GetSuccess() *minimal_demo.QueryResponse {
	if !p.IsSetSuccess() {
		return QueryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryResult) SetSuccess(x interface{}) {
	p.Success = x.(*minimal_demo.QueryResponse)
}

func (p *QueryResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, Req *minimal_demo.AddRequest) (r *minimal_demo.AddResponse, err error) {
	var _args AddArgs
	_args.Req = Req
	var _result AddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Query(ctx context.Context, Req *minimal_demo.QueryRequest) (r *minimal_demo.QueryResponse, err error) {
	var _args QueryArgs
	_args.Req = Req
	var _result QueryResult
	if err = p.c.Call(ctx, "Query", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
