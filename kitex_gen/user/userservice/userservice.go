// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "github.com/808-not-found/tik_duck/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister":      kitex.NewMethodInfo(userRegisterHandler, newUserServiceUserRegisterArgs, newUserServiceUserRegisterResult, false),
		"UserGetFeed":       kitex.NewMethodInfo(userGetFeedHandler, newUserServiceUserGetFeedArgs, newUserServiceUserGetFeedResult, false),
		"UserLogin":         kitex.NewMethodInfo(userLoginHandler, newUserServiceUserLoginArgs, newUserServiceUserLoginResult, false),
		"UserInfo":          kitex.NewMethodInfo(userInfoHandler, newUserServiceUserInfoArgs, newUserServiceUserInfoResult, false),
		"UserPublishList":   kitex.NewMethodInfo(userPublishListHandler, newUserServiceUserPublishListArgs, newUserServiceUserPublishListResult, false),
		"UserPublishAction": kitex.NewMethodInfo(userPublishActionHandler, newUserServiceUserPublishActionArgs, newUserServiceUserPublishActionResult, false),
		"UserTest":          kitex.NewMethodInfo(userTestHandler, newUserServiceUserTestArgs, newUserServiceUserTestResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserRegisterArgs)
	realResult := result.(*user.UserServiceUserRegisterResult)
	success, err := handler.(user.UserService).UserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserRegisterArgs() interface{} {
	return user.NewUserServiceUserRegisterArgs()
}

func newUserServiceUserRegisterResult() interface{} {
	return user.NewUserServiceUserRegisterResult()
}

func userGetFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserGetFeedArgs)
	realResult := result.(*user.UserServiceUserGetFeedResult)
	success, err := handler.(user.UserService).UserGetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserGetFeedArgs() interface{} {
	return user.NewUserServiceUserGetFeedArgs()
}

func newUserServiceUserGetFeedResult() interface{} {
	return user.NewUserServiceUserGetFeedResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserLoginArgs)
	realResult := result.(*user.UserServiceUserLoginResult)
	success, err := handler.(user.UserService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserLoginArgs() interface{} {
	return user.NewUserServiceUserLoginArgs()
}

func newUserServiceUserLoginResult() interface{} {
	return user.NewUserServiceUserLoginResult()
}

func userInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserInfoArgs)
	realResult := result.(*user.UserServiceUserInfoResult)
	success, err := handler.(user.UserService).UserInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserInfoArgs() interface{} {
	return user.NewUserServiceUserInfoArgs()
}

func newUserServiceUserInfoResult() interface{} {
	return user.NewUserServiceUserInfoResult()
}

func userPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserPublishListArgs)
	realResult := result.(*user.UserServiceUserPublishListResult)
	success, err := handler.(user.UserService).UserPublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserPublishListArgs() interface{} {
	return user.NewUserServiceUserPublishListArgs()
}

func newUserServiceUserPublishListResult() interface{} {
	return user.NewUserServiceUserPublishListResult()
}

func userPublishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserPublishActionArgs)
	realResult := result.(*user.UserServiceUserPublishActionResult)
	success, err := handler.(user.UserService).UserPublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserPublishActionArgs() interface{} {
	return user.NewUserServiceUserPublishActionArgs()
}

func newUserServiceUserPublishActionResult() interface{} {
	return user.NewUserServiceUserPublishActionResult()
}

func userTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserTestArgs)
	realResult := result.(*user.UserServiceUserTestResult)
	success, err := handler.(user.UserService).UserTest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserTestArgs() interface{} {
	return user.NewUserServiceUserTestArgs()
}

func newUserServiceUserTestResult() interface{} {
	return user.NewUserServiceUserTestResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, req *user.UserRegisterRequest) (r *user.UserRegisterResponse, err error) {
	var _args user.UserServiceUserRegisterArgs
	_args.Req = req
	var _result user.UserServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserGetFeed(ctx context.Context, req *user.FeedRequest) (r *user.FeedResponse, err error) {
	var _args user.UserServiceUserGetFeedArgs
	_args.Req = req
	var _result user.UserServiceUserGetFeedResult
	if err = p.c.Call(ctx, "UserGetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *user.UserLoginRequest) (r *user.UserLoginResponse, err error) {
	var _args user.UserServiceUserLoginArgs
	_args.Req = req
	var _result user.UserServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserInfo(ctx context.Context, req *user.UserRequest) (r *user.UserResponse, err error) {
	var _args user.UserServiceUserInfoArgs
	_args.Req = req
	var _result user.UserServiceUserInfoResult
	if err = p.c.Call(ctx, "UserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserPublishList(ctx context.Context, req *user.PublishListRequest) (r *user.PublishListResponse, err error) {
	var _args user.UserServiceUserPublishListArgs
	_args.Req = req
	var _result user.UserServiceUserPublishListResult
	if err = p.c.Call(ctx, "UserPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserPublishAction(ctx context.Context, req *user.PublishActionRequest) (r *user.PublishActionResponse, err error) {
	var _args user.UserServiceUserPublishActionArgs
	_args.Req = req
	var _result user.UserServiceUserPublishActionResult
	if err = p.c.Call(ctx, "UserPublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserTest(ctx context.Context, req *user.Testinfo) (r *user.Testinfo, err error) {
	var _args user.UserServiceUserTestArgs
	_args.Req = req
	var _result user.UserServiceUserTestResult
	if err = p.c.Call(ctx, "UserTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
