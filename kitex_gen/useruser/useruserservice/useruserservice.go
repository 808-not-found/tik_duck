// Code generated by Kitex v0.4.4. DO NOT EDIT.

package useruserservice

import (
	"context"
	useruser "github.com/808-not-found/tik_duck/kitex_gen/useruser"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userUserServiceServiceInfo
}

var userUserServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserUserService"
	handlerType := (*useruser.UserUserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRelationAction":       kitex.NewMethodInfo(userRelationActionHandler, newUserUserServiceUserRelationActionArgs, newUserUserServiceUserRelationActionResult, false),
		"UserRelationFollowList":   kitex.NewMethodInfo(userRelationFollowListHandler, newUserUserServiceUserRelationFollowListArgs, newUserUserServiceUserRelationFollowListResult, false),
		"UserRelationFollowerList": kitex.NewMethodInfo(userRelationFollowerListHandler, newUserUserServiceUserRelationFollowerListArgs, newUserUserServiceUserRelationFollowerListResult, false),
		"UserRelationFriendList":   kitex.NewMethodInfo(userRelationFriendListHandler, newUserUserServiceUserRelationFriendListArgs, newUserUserServiceUserRelationFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "useruser",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRelationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useruser.UserUserServiceUserRelationActionArgs)
	realResult := result.(*useruser.UserUserServiceUserRelationActionResult)
	success, err := handler.(useruser.UserUserService).UserRelationAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUserServiceUserRelationActionArgs() interface{} {
	return useruser.NewUserUserServiceUserRelationActionArgs()
}

func newUserUserServiceUserRelationActionResult() interface{} {
	return useruser.NewUserUserServiceUserRelationActionResult()
}

func userRelationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useruser.UserUserServiceUserRelationFollowListArgs)
	realResult := result.(*useruser.UserUserServiceUserRelationFollowListResult)
	success, err := handler.(useruser.UserUserService).UserRelationFollowList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUserServiceUserRelationFollowListArgs() interface{} {
	return useruser.NewUserUserServiceUserRelationFollowListArgs()
}

func newUserUserServiceUserRelationFollowListResult() interface{} {
	return useruser.NewUserUserServiceUserRelationFollowListResult()
}

func userRelationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useruser.UserUserServiceUserRelationFollowerListArgs)
	realResult := result.(*useruser.UserUserServiceUserRelationFollowerListResult)
	success, err := handler.(useruser.UserUserService).UserRelationFollowerList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUserServiceUserRelationFollowerListArgs() interface{} {
	return useruser.NewUserUserServiceUserRelationFollowerListArgs()
}

func newUserUserServiceUserRelationFollowerListResult() interface{} {
	return useruser.NewUserUserServiceUserRelationFollowerListResult()
}

func userRelationFriendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*useruser.UserUserServiceUserRelationFriendListArgs)
	realResult := result.(*useruser.UserUserServiceUserRelationFriendListResult)
	success, err := handler.(useruser.UserUserService).UserRelationFriendList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserUserServiceUserRelationFriendListArgs() interface{} {
	return useruser.NewUserUserServiceUserRelationFriendListArgs()
}

func newUserUserServiceUserRelationFriendListResult() interface{} {
	return useruser.NewUserUserServiceUserRelationFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRelationAction(ctx context.Context, req *useruser.RelationActionRequest) (r *useruser.RelationActionResponse, err error) {
	var _args useruser.UserUserServiceUserRelationActionArgs
	_args.Req = req
	var _result useruser.UserUserServiceUserRelationActionResult
	if err = p.c.Call(ctx, "UserRelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRelationFollowList(ctx context.Context, req *useruser.RelationFollowListRequest) (r *useruser.RelationFollowListResponse, err error) {
	var _args useruser.UserUserServiceUserRelationFollowListArgs
	_args.Req = req
	var _result useruser.UserUserServiceUserRelationFollowListResult
	if err = p.c.Call(ctx, "UserRelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRelationFollowerList(ctx context.Context, req *useruser.RelationFollowerListRequest) (r *useruser.RelationFollowerListResponse, err error) {
	var _args useruser.UserUserServiceUserRelationFollowerListArgs
	_args.Req = req
	var _result useruser.UserUserServiceUserRelationFollowerListResult
	if err = p.c.Call(ctx, "UserRelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserRelationFriendList(ctx context.Context, req *useruser.RelationFriendListRequest) (r *useruser.RelationFriendListResponse, err error) {
	var _args useruser.UserUserServiceUserRelationFriendListArgs
	_args.Req = req
	var _result useruser.UserUserServiceUserRelationFriendListResult
	if err = p.c.Call(ctx, "UserRelationFriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
