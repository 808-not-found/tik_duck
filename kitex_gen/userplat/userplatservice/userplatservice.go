// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userplatservice

import (
	"context"
	userplat "github.com/808-not-found/tik_duck/kitex_gen/userplat"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userPlatServiceServiceInfo
}

var userPlatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserPlatService"
	handlerType := (*userplat.UserPlatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserFavoriteAction": kitex.NewMethodInfo(userFavoriteActionHandler, newUserPlatServiceUserFavoriteActionArgs, newUserPlatServiceUserFavoriteActionResult, false),
		"UserFavoriteList":   kitex.NewMethodInfo(userFavoriteListHandler, newUserPlatServiceUserFavoriteListArgs, newUserPlatServiceUserFavoriteListResult, false),
		"UserCommentAction":  kitex.NewMethodInfo(userCommentActionHandler, newUserPlatServiceUserCommentActionArgs, newUserPlatServiceUserCommentActionResult, false),
		"UserCommentList":    kitex.NewMethodInfo(userCommentListHandler, newUserPlatServiceUserCommentListArgs, newUserPlatServiceUserCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "userplat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userFavoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userplat.UserPlatServiceUserFavoriteActionArgs)
	realResult := result.(*userplat.UserPlatServiceUserFavoriteActionResult)
	success, err := handler.(userplat.UserPlatService).UserFavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserPlatServiceUserFavoriteActionArgs() interface{} {
	return userplat.NewUserPlatServiceUserFavoriteActionArgs()
}

func newUserPlatServiceUserFavoriteActionResult() interface{} {
	return userplat.NewUserPlatServiceUserFavoriteActionResult()
}

func userFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userplat.UserPlatServiceUserFavoriteListArgs)
	realResult := result.(*userplat.UserPlatServiceUserFavoriteListResult)
	success, err := handler.(userplat.UserPlatService).UserFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserPlatServiceUserFavoriteListArgs() interface{} {
	return userplat.NewUserPlatServiceUserFavoriteListArgs()
}

func newUserPlatServiceUserFavoriteListResult() interface{} {
	return userplat.NewUserPlatServiceUserFavoriteListResult()
}

func userCommentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userplat.UserPlatServiceUserCommentActionArgs)
	realResult := result.(*userplat.UserPlatServiceUserCommentActionResult)
	success, err := handler.(userplat.UserPlatService).UserCommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserPlatServiceUserCommentActionArgs() interface{} {
	return userplat.NewUserPlatServiceUserCommentActionArgs()
}

func newUserPlatServiceUserCommentActionResult() interface{} {
	return userplat.NewUserPlatServiceUserCommentActionResult()
}

func userCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*userplat.UserPlatServiceUserCommentListArgs)
	realResult := result.(*userplat.UserPlatServiceUserCommentListResult)
	success, err := handler.(userplat.UserPlatService).UserCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserPlatServiceUserCommentListArgs() interface{} {
	return userplat.NewUserPlatServiceUserCommentListArgs()
}

func newUserPlatServiceUserCommentListResult() interface{} {
	return userplat.NewUserPlatServiceUserCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserFavoriteAction(ctx context.Context, req *userplat.FavoriteActionRequest) (r *userplat.FavoriteActionResponse, err error) {
	var _args userplat.UserPlatServiceUserFavoriteActionArgs
	_args.Req = req
	var _result userplat.UserPlatServiceUserFavoriteActionResult
	if err = p.c.Call(ctx, "UserFavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserFavoriteList(ctx context.Context, req *userplat.FavoriteListRequest) (r *userplat.FavoriteListResponse, err error) {
	var _args userplat.UserPlatServiceUserFavoriteListArgs
	_args.Req = req
	var _result userplat.UserPlatServiceUserFavoriteListResult
	if err = p.c.Call(ctx, "UserFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserCommentAction(ctx context.Context, req *userplat.CommentActionRequest) (r *userplat.CommentActionResponse, err error) {
	var _args userplat.UserPlatServiceUserCommentActionArgs
	_args.Req = req
	var _result userplat.UserPlatServiceUserCommentActionResult
	if err = p.c.Call(ctx, "UserCommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserCommentList(ctx context.Context, req *userplat.CommentListRequest) (r *userplat.CommentListResponse, err error) {
	var _args userplat.UserPlatServiceUserCommentListArgs
	_args.Req = req
	var _result userplat.UserPlatServiceUserCommentListResult
	if err = p.c.Call(ctx, "UserCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
