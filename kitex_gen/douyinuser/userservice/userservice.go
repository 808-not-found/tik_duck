// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	"fmt"
	douyinuser "github.com/808-not-found/tik_duck/kitex_gen/douyinuser"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*douyinuser.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"User_Register":       kitex.NewMethodInfo(user_RegisterHandler, newUser_RegisterArgs, newUser_RegisterResult, false),
		"User_GetFeed":        kitex.NewMethodInfo(user_GetFeedHandler, newUser_GetFeedArgs, newUser_GetFeedResult, false),
		"User_Login":          kitex.NewMethodInfo(user_LoginHandler, newUser_LoginArgs, newUser_LoginResult, false),
		"User_Info":           kitex.NewMethodInfo(user_InfoHandler, newUser_InfoArgs, newUser_InfoResult, false),
		"User_Publish_list":   kitex.NewMethodInfo(user_PublishListHandler, newUser_PublishListArgs, newUser_PublishListResult, false),
		"User_Publish_action": kitex.NewMethodInfo(user_PublishActionHandler, newUser_PublishActionArgs, newUser_PublishActionResult, false),
		"User_Test":           kitex.NewMethodInfo(user_TestHandler, newUser_TestArgs, newUser_TestResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyinuser",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func user_RegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinUserRegisterRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_Register(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_RegisterArgs:
		success, err := handler.(douyinuser.UserService).User_Register(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_RegisterResult)
		realResult.Success = success
	}
	return nil
}
func newUser_RegisterArgs() interface{} {
	return &User_RegisterArgs{}
}

func newUser_RegisterResult() interface{} {
	return &User_RegisterResult{}
}

type User_RegisterArgs struct {
	Req *douyinuser.DouyinUserRegisterRequest
}

func (p *User_RegisterArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinUserRegisterRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_RegisterArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_RegisterArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_RegisterArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_RegisterArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_RegisterArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinUserRegisterRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_RegisterArgs_Req_DEFAULT *douyinuser.DouyinUserRegisterRequest

func (p *User_RegisterArgs) GetReq() *douyinuser.DouyinUserRegisterRequest {
	if !p.IsSetReq() {
		return User_RegisterArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_RegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_RegisterResult struct {
	Success *douyinuser.DouyinUserRegisterResponse
}

var User_RegisterResult_Success_DEFAULT *douyinuser.DouyinUserRegisterResponse

func (p *User_RegisterResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinUserRegisterResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_RegisterResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_RegisterResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_RegisterResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_RegisterResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_RegisterResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinUserRegisterResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_RegisterResult) GetSuccess() *douyinuser.DouyinUserRegisterResponse {
	if !p.IsSetSuccess() {
		return User_RegisterResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_RegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinUserRegisterResponse)
}

func (p *User_RegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func user_GetFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinFeedRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_GetFeed(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_GetFeedArgs:
		success, err := handler.(douyinuser.UserService).User_GetFeed(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_GetFeedResult)
		realResult.Success = success
	}
	return nil
}
func newUser_GetFeedArgs() interface{} {
	return &User_GetFeedArgs{}
}

func newUser_GetFeedResult() interface{} {
	return &User_GetFeedResult{}
}

type User_GetFeedArgs struct {
	Req *douyinuser.DouyinFeedRequest
}

func (p *User_GetFeedArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinFeedRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_GetFeedArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_GetFeedArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_GetFeedArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_GetFeedArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_GetFeedArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinFeedRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_GetFeedArgs_Req_DEFAULT *douyinuser.DouyinFeedRequest

func (p *User_GetFeedArgs) GetReq() *douyinuser.DouyinFeedRequest {
	if !p.IsSetReq() {
		return User_GetFeedArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_GetFeedArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_GetFeedResult struct {
	Success *douyinuser.DouyinFeedResponse
}

var User_GetFeedResult_Success_DEFAULT *douyinuser.DouyinFeedResponse

func (p *User_GetFeedResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinFeedResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_GetFeedResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_GetFeedResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_GetFeedResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_GetFeedResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_GetFeedResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinFeedResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_GetFeedResult) GetSuccess() *douyinuser.DouyinFeedResponse {
	if !p.IsSetSuccess() {
		return User_GetFeedResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_GetFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinFeedResponse)
}

func (p *User_GetFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func user_LoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinUserLoginRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_LoginArgs:
		success, err := handler.(douyinuser.UserService).User_Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_LoginResult)
		realResult.Success = success
	}
	return nil
}
func newUser_LoginArgs() interface{} {
	return &User_LoginArgs{}
}

func newUser_LoginResult() interface{} {
	return &User_LoginResult{}
}

type User_LoginArgs struct {
	Req *douyinuser.DouyinUserLoginRequest
}

func (p *User_LoginArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinUserLoginRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_LoginArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_LoginArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_LoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_LoginArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinUserLoginRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_LoginArgs_Req_DEFAULT *douyinuser.DouyinUserLoginRequest

func (p *User_LoginArgs) GetReq() *douyinuser.DouyinUserLoginRequest {
	if !p.IsSetReq() {
		return User_LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_LoginResult struct {
	Success *douyinuser.DouyinUserLoginResponse
}

var User_LoginResult_Success_DEFAULT *douyinuser.DouyinUserLoginResponse

func (p *User_LoginResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinUserLoginResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_LoginResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_LoginResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_LoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_LoginResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinUserLoginResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_LoginResult) GetSuccess() *douyinuser.DouyinUserLoginResponse {
	if !p.IsSetSuccess() {
		return User_LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinUserLoginResponse)
}

func (p *User_LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func user_InfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinUserInfoRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_Info(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_InfoArgs:
		success, err := handler.(douyinuser.UserService).User_Info(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_InfoResult)
		realResult.Success = success
	}
	return nil
}
func newUser_InfoArgs() interface{} {
	return &User_InfoArgs{}
}

func newUser_InfoResult() interface{} {
	return &User_InfoResult{}
}

type User_InfoArgs struct {
	Req *douyinuser.DouyinUserInfoRequest
}

func (p *User_InfoArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinUserInfoRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_InfoArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_InfoArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_InfoArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_InfoArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_InfoArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinUserInfoRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_InfoArgs_Req_DEFAULT *douyinuser.DouyinUserInfoRequest

func (p *User_InfoArgs) GetReq() *douyinuser.DouyinUserInfoRequest {
	if !p.IsSetReq() {
		return User_InfoArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_InfoArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_InfoResult struct {
	Success *douyinuser.DouyinUserInfoResponse
}

var User_InfoResult_Success_DEFAULT *douyinuser.DouyinUserInfoResponse

func (p *User_InfoResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinUserInfoResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_InfoResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_InfoResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_InfoResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_InfoResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_InfoResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinUserInfoResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_InfoResult) GetSuccess() *douyinuser.DouyinUserInfoResponse {
	if !p.IsSetSuccess() {
		return User_InfoResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_InfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinUserInfoResponse)
}

func (p *User_InfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func user_PublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinPublishListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_PublishList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_PublishListArgs:
		success, err := handler.(douyinuser.UserService).User_PublishList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_PublishListResult)
		realResult.Success = success
	}
	return nil
}
func newUser_PublishListArgs() interface{} {
	return &User_PublishListArgs{}
}

func newUser_PublishListResult() interface{} {
	return &User_PublishListResult{}
}

type User_PublishListArgs struct {
	Req *douyinuser.DouyinPublishListRequest
}

func (p *User_PublishListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinPublishListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_PublishListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_PublishListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_PublishListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_PublishListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_PublishListArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinPublishListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_PublishListArgs_Req_DEFAULT *douyinuser.DouyinPublishListRequest

func (p *User_PublishListArgs) GetReq() *douyinuser.DouyinPublishListRequest {
	if !p.IsSetReq() {
		return User_PublishListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_PublishListArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_PublishListResult struct {
	Success *douyinuser.DouyinPublishListResponse
}

var User_PublishListResult_Success_DEFAULT *douyinuser.DouyinPublishListResponse

func (p *User_PublishListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinPublishListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_PublishListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_PublishListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_PublishListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_PublishListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_PublishListResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinPublishListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_PublishListResult) GetSuccess() *douyinuser.DouyinPublishListResponse {
	if !p.IsSetSuccess() {
		return User_PublishListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_PublishListResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinPublishListResponse)
}

func (p *User_PublishListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func user_PublishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinPublishActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_PublishAction(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_PublishActionArgs:
		success, err := handler.(douyinuser.UserService).User_PublishAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_PublishActionResult)
		realResult.Success = success
	}
	return nil
}
func newUser_PublishActionArgs() interface{} {
	return &User_PublishActionArgs{}
}

func newUser_PublishActionResult() interface{} {
	return &User_PublishActionResult{}
}

type User_PublishActionArgs struct {
	Req *douyinuser.DouyinPublishActionRequest
}

func (p *User_PublishActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinPublishActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_PublishActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_PublishActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_PublishActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_PublishActionArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_PublishActionArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinPublishActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_PublishActionArgs_Req_DEFAULT *douyinuser.DouyinPublishActionRequest

func (p *User_PublishActionArgs) GetReq() *douyinuser.DouyinPublishActionRequest {
	if !p.IsSetReq() {
		return User_PublishActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_PublishActionArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_PublishActionResult struct {
	Success *douyinuser.DouyinPublishActionResponse
}

var User_PublishActionResult_Success_DEFAULT *douyinuser.DouyinPublishActionResponse

func (p *User_PublishActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinPublishActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_PublishActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_PublishActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_PublishActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_PublishActionResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_PublishActionResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinPublishActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_PublishActionResult) GetSuccess() *douyinuser.DouyinPublishActionResponse {
	if !p.IsSetSuccess() {
		return User_PublishActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_PublishActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinPublishActionResponse)
}

func (p *User_PublishActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func user_TestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(douyinuser.DouyinTestinfo)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(douyinuser.UserService).User_Test(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *User_TestArgs:
		success, err := handler.(douyinuser.UserService).User_Test(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*User_TestResult)
		realResult.Success = success
	}
	return nil
}
func newUser_TestArgs() interface{} {
	return &User_TestArgs{}
}

func newUser_TestResult() interface{} {
	return &User_TestResult{}
}

type User_TestArgs struct {
	Req *douyinuser.DouyinTestinfo
}

func (p *User_TestArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(douyinuser.DouyinTestinfo)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *User_TestArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *User_TestArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *User_TestArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in User_TestArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *User_TestArgs) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinTestinfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var User_TestArgs_Req_DEFAULT *douyinuser.DouyinTestinfo

func (p *User_TestArgs) GetReq() *douyinuser.DouyinTestinfo {
	if !p.IsSetReq() {
		return User_TestArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *User_TestArgs) IsSetReq() bool {
	return p.Req != nil
}

type User_TestResult struct {
	Success *douyinuser.DouyinTestinfo
}

var User_TestResult_Success_DEFAULT *douyinuser.DouyinTestinfo

func (p *User_TestResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(douyinuser.DouyinTestinfo)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *User_TestResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *User_TestResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *User_TestResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in User_TestResult")
	}
	return proto.Marshal(p.Success)
}

func (p *User_TestResult) Unmarshal(in []byte) error {
	msg := new(douyinuser.DouyinTestinfo)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *User_TestResult) GetSuccess() *douyinuser.DouyinTestinfo {
	if !p.IsSetSuccess() {
		return User_TestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *User_TestResult) SetSuccess(x interface{}) {
	p.Success = x.(*douyinuser.DouyinTestinfo)
}

func (p *User_TestResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) User_Register(ctx context.Context, Req *douyinuser.DouyinUserRegisterRequest) (r *douyinuser.DouyinUserRegisterResponse, err error) {
	var _args User_RegisterArgs
	_args.Req = Req
	var _result User_RegisterResult
	if err = p.c.Call(ctx, "User_Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User_GetFeed(ctx context.Context, Req *douyinuser.DouyinFeedRequest) (r *douyinuser.DouyinFeedResponse, err error) {
	var _args User_GetFeedArgs
	_args.Req = Req
	var _result User_GetFeedResult
	if err = p.c.Call(ctx, "User_GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User_Login(ctx context.Context, Req *douyinuser.DouyinUserLoginRequest) (r *douyinuser.DouyinUserLoginResponse, err error) {
	var _args User_LoginArgs
	_args.Req = Req
	var _result User_LoginResult
	if err = p.c.Call(ctx, "User_Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User_Info(ctx context.Context, Req *douyinuser.DouyinUserInfoRequest) (r *douyinuser.DouyinUserInfoResponse, err error) {
	var _args User_InfoArgs
	_args.Req = Req
	var _result User_InfoResult
	if err = p.c.Call(ctx, "User_Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User_PublishList(ctx context.Context, Req *douyinuser.DouyinPublishListRequest) (r *douyinuser.DouyinPublishListResponse, err error) {
	var _args User_PublishListArgs
	_args.Req = Req
	var _result User_PublishListResult
	if err = p.c.Call(ctx, "User_Publish_list", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User_PublishAction(ctx context.Context, Req *douyinuser.DouyinPublishActionRequest) (r *douyinuser.DouyinPublishActionResponse, err error) {
	var _args User_PublishActionArgs
	_args.Req = Req
	var _result User_PublishActionResult
	if err = p.c.Call(ctx, "User_Publish_action", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User_Test(ctx context.Context, Req *douyinuser.DouyinTestinfo) (r *douyinuser.DouyinTestinfo, err error) {
	var _args User_TestArgs
	_args.Req = Req
	var _result User_TestResult
	if err = p.c.Call(ctx, "User_Test", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
